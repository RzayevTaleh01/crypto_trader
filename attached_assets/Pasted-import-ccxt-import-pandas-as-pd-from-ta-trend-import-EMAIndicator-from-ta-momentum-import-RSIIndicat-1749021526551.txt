import ccxt
import pandas as pd
from ta.trend import EMAIndicator
from ta.momentum import RSIIndicator
import time

# Binance API bağlantısı
exchange = ccxt.binance({
    'enableRateLimit': True,
})

def get_symbols():
    markets = exchange.load_markets()
    symbols = [s for s in markets if s.endswith('/USDT') and markets[s]['spot']]
    return symbols

def fetch_ohlcv(symbol, timeframe='1h', limit=100):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df
    except Exception as e:
        print(f"Xəta: {symbol} — {e}")
        return None

def analyze_symbol(symbol):
    df = fetch_ohlcv(symbol)
    if df is None or len(df) < 50:
        return None

    df['ema20'] = EMAIndicator(df['close'], window=20).ema_indicator()
    df['ema50'] = EMAIndicator(df['close'], window=50).ema_indicator()
    df['rsi'] = RSIIndicator(df['close'], window=14).rsi()

    # Son şam (candle)
    last = df.iloc[-1]

    # EMA Cross
    ema_cross = 'none'
    if df['ema20'].iloc[-2] < df['ema50'].iloc[-2] and last['ema20'] > last['ema50']:
        ema_cross = 'golden'  # ALIŞ
    elif df['ema20'].iloc[-2] > df['ema50'].iloc[-2] and last['ema20'] < last['ema50']:
        ema_cross = 'death'   # SATIŞ

    # RSI
    rsi_status = 'normal'
    if last['rsi'] < 30:
        rsi_status = 'oversold'
    elif last['rsi'] > 70:
        rsi_status = 'overbought'

    # Həcm filtri
    avg_volume = df['volume'].iloc[-6:-1].mean()
    vol_ratio = last['volume'] / avg_volume if avg_volume > 0 else 0

    signal = None
    if ema_cross == 'golden' and rsi_status == 'oversold' and vol_ratio > 2:
        signal = 'BUY'
    elif ema_cross == 'death' and rsi_status == 'overbought' and vol_ratio > 2:
        signal = 'SELL'

    if signal:
        return {
            'symbol': symbol,
            'signal': signal,
            'price': last['close'],
            'rsi': round(last['rsi'], 2),
            'vol_ratio': round(vol_ratio, 2)
        }

    return None

def run_engine():
    symbols = get_symbols()
    print(f"{len(symbols)} simvol tapıldı. Skanning başlayır...")

    for sym in symbols:
        time.sleep(0.3)  # API limit
        result = analyze_symbol(sym)
        if result:
            print(f"{result['symbol']}: {result['signal']} — Price: {result['price']}, RSI: {result['rsi']}, Volume x{result['vol_ratio']}")

if __name__ == "__main__":
    run_engine()
